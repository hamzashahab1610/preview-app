{"version":3,"sources":["utils/constants.js","components/CloudinaryUploader.js","components/App.js","components/Header.js","components/FileViewer.js","components/FilesList.js","router/AppRouter.js","index.js"],"names":["API_URL","CloudinaryUploader","setUrl","sources","sourceKeys","dropboxAppKey","instagramClientId","cloudName","uploadPreset","buttonText","style","color","border","width","backgroundColor","borderRadius","height","cropping","onSuccess","res","console","log","info","secure_url","onFailure","response","logging","customPublicId","eager","use_filename","App","props","useState","url","title","description","state","setState","errorMsg","setErrorMsg","handleInputChange","useRef","event","target","name","value","handleSubmit","a","preventDefault","trim","axios","post","history","push","data","Fragment","Form","className","onSubmit","e","marginTop","Row","Col","Group","controlId","Control","type","placeholder","onChange","Button","variant","Header","activeClassName","to","exact","FileView","FilesList","filesList","setFilesList","setFileResponse","preview","setPreview","previewUrl","setpreviewUrl","id","x","setx","search","setSearch","getPreviewUrl","then","status","React","modalIsOpen","setIsOpen","useEffect","get","getFilesList","deleteFile","window","location","reload","previewFile","responseType","result","isOpen","onAfterOpen","onRequestClose","content","top","left","background","contentLabel","float","padding","marginBottom","href","download","src","alt","marginRight","fontWeight","paddingLeft","toLocaleLowerCase","length","map","_id","toLowerCase","key","onClick","colSpan","AppRouter","component","path","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"sqBAAaA,EAAU,8C,SCuERC,MApEf,YAAyC,IAAXC,EAAU,EAAVA,OAa7B,OACC,6BACC,kBAAC,IAAD,MACA,kBAAC,IAAD,CACCC,QAAS,CAAC,SAGVC,WAAY,CACXC,cAAe,cACfC,kBAAmB,cAKpBC,UAAW,YAEXC,aAAc,WACdC,WAAY,cACZC,MAAO,CACNC,MAAO,QACPC,OAAQ,OACRC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,MACdC,OAAQ,QAGTC,UAAU,EACVC,UAxCqB,SAACC,GACxBC,QAAQC,IAAI,SAAUF,GAItBjB,EAAOiB,EAAIG,KAAKC,aAoCdC,UAhCqB,SAACC,GACxBL,QAAQC,IAAI,WAAYI,IAgCtBC,SAAS,EAETC,eAAgB,SAEhBC,MAAO,uCACPC,cAAc,MCqHHC,EAjKH,SAACC,GAAW,IAAD,EACEC,mBAAS,MADX,gCAEAA,mBAAS,KAFT,mBAEfC,EAFe,KAEV/B,EAFU,OAGc8B,mBAAS,IAHvB,gCAIIA,mBAAS,CAClCE,MAAO,GACPC,YAAa,MANQ,mBAIfC,EAJe,KAIRC,EAJQ,OAQUL,mBAAS,IARnB,mBAQfM,EARe,KAQLC,EARK,OAS8BP,oBAAS,GATvC,mBAYhBQ,GAZgB,UAUNC,mBAEU,SAACC,GAC1BL,EAAS,2BACLD,GADI,kBAENM,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,WA0B9BC,EAAY,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,yDACpBL,EAAMM,iBAEN5B,QAAQC,IAAI,0BAHQ,SAMXa,EAAuBE,EAAvBF,MAAOC,EAAgBC,EAAhBD,YACM,KAAjBD,EAAMe,QAAwC,KAAvBd,EAAYc,OAPpB,wBAclBV,EAAY,IAdM,SAeZW,IAAMC,KAAN,UAAcnD,EAAd,WAAgC,CACrCkC,MAAOA,EACPC,YAAaA,EACbF,IAAKA,IAlBY,OAoBlBF,EAAMqB,QAAQC,KAAK,SApBD,wBAsBlBd,EAAY,sCAtBM,0DAyBnB,KAAMd,UAAYc,EAAY,KAAMd,SAAS6B,MAzB1B,0DAAH,sDA6BlB,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,EAAD,CAAoBrD,OAAQA,IAE5B,kBAACsD,EAAA,EAAD,CACCC,UAAU,cACVC,SAAU,SAACC,GAAD,OAAOb,EAAaa,IAC9BjD,MAAO,CAAEkD,UAAW,SAEnBtB,GAAY,uBAAGmB,UAAU,YAAYnB,GACtC,kBAACuB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACN,EAAA,EAAKO,MAAN,CAAYC,UAAU,SACrB,kBAACR,EAAA,EAAKS,QAAN,CACCC,KAAK,OACLtB,KAAK,QACLC,MAAOT,EAAMF,OAAS,GACtBiC,YAAY,cACZC,SAAU5B,OAKd,kBAACqB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACN,EAAA,EAAKO,MAAN,CAAYC,UAAU,eACrB,kBAACR,EAAA,EAAKS,QAAN,CACCC,KAAK,OACLtB,KAAK,cACLC,MAAOT,EAAMD,aAAe,GAC5BgC,YAAY,oBACZC,SAAU5B,OAKd,yBAAKiB,UAAU,mBA+Cf,kBAACY,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,UAA/B,aC7IWK,EAhBA,WACd,OACC,yBAAKd,UAAU,UACd,wDACA,6BACC,kBAAC,IAAD,CAASe,gBAAgB,SAASC,GAAG,IAAIC,OAAO,GAAhD,QAGA,kBAAC,IAAD,CAASF,gBAAgB,SAASC,GAAG,SAArC,iB,sCCJWE,ICsRAC,EArRG,WAAO,IAAD,EACW5C,mBAAS,IADpB,mBAChB6C,EADgB,KACLC,EADK,OAES9C,mBAAS,IAFlB,mBAEhBM,EAFgB,KAENC,EAFM,OAGiBP,qBAHjB,mBAGF+C,GAHE,aAIO/C,oBAAS,GAJhB,mBAIhBgD,EAJgB,KAIPC,EAJO,OAKajD,qBALb,mBAKhBkD,EALgB,KAKJC,EALI,OAMLnD,mBAAS,CAAEoD,GAAI,GAAIlD,MAAO,GAAID,IAAK,KAN9B,mBAMhBoD,EANgB,KAMbC,EANa,OAOKtD,mBAAS,IAPd,mBAOhBuD,EAPgB,KAORC,EAPQ,KAmBvBpE,QAAQC,IAAI,aAAc6D,GAE1B,IAAMO,EAAa,uCAAG,WAAOxD,GAAP,SAAAc,EAAA,6DACrB3B,QAAQC,IAAI,MAAOY,GADE,kBAIdiB,IACJC,KADI,UACInD,EADJ,eAC0B,CAAEiC,IAAKA,IACrCyD,MAAK,SAACvE,GACNC,QAAQC,IAAI,MAAOF,GACnBgE,EAAchE,EAAImC,KAAK0B,QAAQ/C,QARb,sDAWhB,KAAMR,UAAsC,MAA1B,KAAMA,SAASkE,QACpCpD,EAAY,sCAZO,wDAAH,sDArBI,EAsCUqD,IAAM5D,UAAS,GAtCzB,mBAsChB6D,EAtCgB,KAsCHC,EAtCG,KAqDvBC,qBAAU,YACS,uCAAG,8BAAAhD,EAAA,+EAEIG,IAAM8C,IAAN,UAAahG,EAAb,iBAFJ,gBAEXsD,EAFW,EAEXA,KACRlC,QAAQC,IAAI,OAAQiC,GACpBf,EAAY,IACZuC,EAAaxB,GALM,kDAOnB,KAAM7B,UAAYc,EAAY,KAAMd,SAAS6B,MAP1B,0DAAH,qDAWlB2C,KACE,IAEH,IAWMC,EAAU,uCAAG,WAAOd,GAAP,SAAArC,EAAA,+EAEXG,IAAM8C,IAAN,UAAahG,EAAb,mBAA+BoF,IAAMM,MAAK,WACzB,qBAAXS,QACVA,OAAOC,SAASC,QAAO,MAJR,sDAQb,KAAM5E,UAAsC,MAA1B,KAAMA,SAASkE,QACpCpD,EAAY,8CATI,wDAAH,sDAcV+D,EAAW,uCAAG,WAAOlB,EAAIlD,EAAOD,GAAlB,eAAAc,EAAA,6DACnBoC,EAAc,IAEdG,EAAK,CAAEF,GAAIA,EAAIlD,MAAOA,EAAOD,IAAKA,IAClCgD,GAAW,GAJQ,kBAMG/B,IAAM8C,IAAN,UAAahG,EAAb,qBAAiCoF,GAAM,CAC3DmB,aAAc,SAPG,OAMZC,EANY,OASlBzB,EAAgByB,GATE,kDAWd,KAAM/E,UAAsC,MAA1B,KAAMA,SAASkE,QACpCpD,EAAY,gDAZK,0DAAH,0DAuCjB,OACC,yBAAKkB,UAAU,mBACd,kBAAC,IAAD,CACCgD,OAAQZ,EACRa,YA7FH,aA8FGC,eA1FH,WACC5B,IACAe,GAAU,GACVb,GAAW,IAwFTvE,MAjIkB,CACpBkG,QAAS,CACRC,IAAK,KACLC,KAAM,KACNjG,MAAO,MACPG,OAAQ,OACR+F,WAAY,UA4HXC,aAAa,iBAEb,uBACCtG,MAAO,CACNuG,MAAO,QACPC,QAAS,cACTC,aAAc,QAEfC,KAAM/B,EAAEpD,IACRoF,UAAQ,GAPT,YAuBA,yBAAKC,IAAKpC,EAAYqC,IAAI,MAE3B,yBAAK7G,MAAO,CAAEyG,aAAc,SAC3B,2BAAOzG,MAAO,CAAE8G,YAAa,OAAQC,WAAY,SAAjD,UAGA,2BACC/G,MAAO,CAAEgH,YAAa,UACtBxD,KAAK,OACLE,SAAU,SAACT,GAAD,OACT6B,EAAU7B,EAAEhB,OAAOE,MAAM8E,yBAK1B3C,EA6FE,KA5FH,oCACE1C,GAAY,uBAAGmB,UAAU,YAAYnB,GACtC,2BAAOmB,UAAU,eAChB,+BACC,4BACC,qCACA,2CACA,yCACA,2CACA,+CAGF,+BACEoB,EAAU+C,OAAS,EACnB/C,EAAUgD,KACT,YAAuC,IAApC5F,EAAmC,EAAnCA,IAAK6F,EAA8B,EAA9BA,IAAK5F,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACnB,GACCD,EAAM6F,cAAcxC,OAAOA,IACzB,GACFpD,EACE4F,cACAxC,OAAOA,IAAW,EAEpB,OACC,wBAAIyC,IAAKF,GACR,wBAAIrE,UAAU,cACZvB,GAEF,wBAAIuB,UAAU,oBACb,uBACC2D,KAAK,KACLa,QAAS,WACR3B,EACCwB,EACA5F,EACAD,GAEDwD,EACCxD,GAlLf6D,GAAU,KAwLI3D,IAGH,wBAAIsB,UAAU,cACZvB,GAEF,4BACC,uBACCkF,KAAK,KACLa,QAAS,kBACR/B,EAAW4B,KAHb,WASD,4BACC,uBACCV,KAAMnF,EACNoF,UAAQ,GAFT,iBAmBN,4BACC,wBACCa,QAAS,EACTxH,MAAO,CAAE+G,WAAY,QAFtB,0CCzPMU,EAdG,kBAChB,kBAAC,IAAD,KACE,yBAAK1E,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2E,UAAWtG,EAAKuG,KAAK,IAAI3D,OAAO,IACvC,kBAAC,IAAD,CAAO0D,UAAWxD,EAAWyD,KAAK,e,cCN5CC,IAAMC,cAAc,QACpBC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,W","file":"static/js/main.fe3e1713.chunk.js","sourcesContent":["export const API_URL = \"https://react-preview-app.azurewebsites.net\";\r\n//export const API_URL = \"http://localhost:3030\";\r\n","import React from \"react\";\r\nimport { WidgetLoader, Widget } from \"react-cloudinary-upload-widget\";\r\n\r\nfunction CloudinaryUploader({ setUrl }) {\r\n\tconst successCallBack = (res) => {\r\n\t\tconsole.log(\"result\", res);\r\n\t\t// var x = res.info.thumbnail_url.replace(\"h_60\", \"h_400\");\r\n\t\t// var y = x.replace(\"w_90\", \"w_400\");\r\n\t\t// console.log(\"thumb\", y);\r\n\t\tsetUrl(res.info.secure_url);\r\n\t\t// setThumbnail(y);\r\n\t\t// setDuration(res.info.duration);\r\n\t};\r\n\tconst failureCallBack = (response) => {\r\n\t\tconsole.log(\"response\", response);\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<WidgetLoader />\r\n\t\t\t<Widget\r\n\t\t\t\tsources={[\"local\"]} // set the sources available for uploading -> by default\r\n\t\t\t\t// all sources are available. More information on their use can be found at\r\n\t\t\t\t// https://cloudinary.com/documentation/upload_widget#the_sources_parameter\r\n\t\t\t\tsourceKeys={{\r\n\t\t\t\t\tdropboxAppKey: \"1dsf42dl1i2\",\r\n\t\t\t\t\tinstagramClientId: \"d7aadf962m\",\r\n\t\t\t\t}} // add source keys\r\n\t\t\t\t// and ID's as an object. More information on their use can be found at\r\n\t\t\t\t// https://cloudinary.com/documentation/upload_widget#the_sources_parameter\r\n\t\t\t\t//resourceType={\"video\"} // optionally set with 'auto', 'image', 'video' or 'raw' -> default = 'auto'\r\n\t\t\t\tcloudName={\"dcvjvqymt\"} // your cloudinary account cloud name.\r\n\t\t\t\t// Located on https://cloudinary.com/console/\r\n\t\t\t\tuploadPreset={\"lj3vitxo\"} // check that an upload preset exists and check mode is signed or unisgned\r\n\t\t\t\tbuttonText={\"Upload File\"} // default 'Upload Files'\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tcolor: \"white\",\r\n\t\t\t\t\tborder: \"none\",\r\n\t\t\t\t\twidth: \"120px\",\r\n\t\t\t\t\tbackgroundColor: \"#1890FF\",\r\n\t\t\t\t\tborderRadius: \"4px\",\r\n\t\t\t\t\theight: \"40px\",\r\n\t\t\t\t}} // inline styling only or style id='cloudinary_upload_button'\r\n\t\t\t\t//folder={\"my_folder\"} // set cloudinary folder name to send file\r\n\t\t\t\tcropping={false} // set ability to crop images -> default = true\r\n\t\t\t\tonSuccess={successCallBack} // add success callback -> returns result\r\n\t\t\t\tonFailure={failureCallBack} // add failure callback -> returns 'response.error' + 'response.result'\r\n\t\t\t\tlogging={false} // logs will be provided for success and failure messages,\r\n\t\t\t\t// set to false for production -> default = true\r\n\t\t\t\tcustomPublicId={\"sample\"} // set a specific custom public_id.\r\n\t\t\t\t// To use the file name as the public_id use 'use_filename={true}' parameter\r\n\t\t\t\teager={\"w_400,h_300,c_pad|w_260,h_200,c_crop\"} // add eager transformations -> deafult = null\r\n\t\t\t\tuse_filename={true} // tell Cloudinary to use the original name of the uploaded\r\n\t\t\t\t// file as its public ID -> default = true,\r\n\r\n\t\t\t\t// ðŸ‘‡ FOR SIGNED UPLOADS ONLY ðŸ‘‡\r\n\r\n\t\t\t\t// generateSignatureUrl={\r\n\t\t\t\t// \t\"http://my_domain.com/api/v1/media/generate_signature\"\r\n\t\t\t\t// } // pass the api\r\n\t\t\t\t// // endpoint for generating a signature -> check cloudinary docs and SDK's for signing uploads\r\n\t\t\t\t// apiKey={648966821516379} // cloudinary API key -> number format\r\n\t\t\t\t// accepts={\"application/json\"} // for signed uploads only -> default = 'application/json'\r\n\t\t\t\t// contentType={\"application/json\"} // for signed uploads only -> default = 'application/json'\r\n\t\t\t\t// withCredentials={true} // default = true -> check axios documentation for more information\r\n\t\t\t\t// unique_filename={true} // setting it to false, you can tell Cloudinary not to attempt to make\r\n\t\t\t\t// // the Public ID unique, and just use the normalized file name -> default = true\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CloudinaryUploader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport axios from \"axios\";\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport CloudinaryUploader from \"./CloudinaryUploader\";\r\n\r\nconst App = (props) => {\r\n\tconst [file, setFile] = useState(null); // state for storing actual image\r\n\tconst [url, setUrl] = useState(\"\");\r\n\tconst [previewSrc, setPreviewSrc] = useState(\"\"); // state for storing previewImage\r\n\tconst [state, setState] = useState({\r\n\t\ttitle: \"\",\r\n\t\tdescription: \"\",\r\n\t});\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\tconst [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\r\n\tconst dropRef = useRef(); // React ref for managing the hover state of droppable area\r\n\r\n\tconst handleInputChange = (event) => {\r\n\t\tsetState({\r\n\t\t\t...state,\r\n\t\t\t[event.target.name]: event.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst onDrop = (files) => {\r\n\t\tconsole.log(\"files\", files);\r\n\t\tconst [uploadedFile] = files;\r\n\t\tsetFile(uploadedFile);\r\n\r\n\t\tconst fileReader = new FileReader();\r\n\t\tfileReader.onload = () => {\r\n\t\t\tsetPreviewSrc(fileReader.result);\r\n\t\t};\r\n\t\tfileReader.readAsDataURL(uploadedFile);\r\n\t\tsetIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\r\n\t\tdropRef.current.style.border = \"2px dashed #e9ebeb\";\r\n\t};\r\n\r\n\tconst updateBorder = (dragState) => {\r\n\t\tif (dragState === \"over\") {\r\n\t\t\tdropRef.current.style.border = \"2px solid #000\";\r\n\t\t} else if (dragState === \"leave\") {\r\n\t\t\tdropRef.current.style.border = \"2px dashed #e9ebeb\";\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconsole.log(\"why are you submitting\");\r\n\r\n\t\ttry {\r\n\t\t\tconst { title, description } = state;\r\n\t\t\tif (title.trim() !== \"\" && description.trim() !== \"\") {\r\n\t\t\t\t//const formData = new FormData();\r\n\t\t\t\t//formData.append(\"file\", file);\r\n\t\t\t\t// formData.append(\"title\", title);\r\n\t\t\t\t// formData.append(\"description\", description);\r\n\t\t\t\t// formData.append(\"url\", url);\r\n\r\n\t\t\t\tsetErrorMsg(\"\");\r\n\t\t\t\tawait axios.post(`${API_URL}/upload`, {\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tdescription: description,\r\n\t\t\t\t\turl: url,\r\n\t\t\t\t});\r\n\t\t\t\tprops.history.push(\"/list\");\r\n\t\t\t} else {\r\n\t\t\t\tsetErrorMsg(\"Please enter all the field values.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\terror.response && setErrorMsg(error.response.data);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<CloudinaryUploader setUrl={setUrl} />\r\n\r\n\t\t\t<Form\r\n\t\t\t\tclassName=\"search-form\"\r\n\t\t\t\tonSubmit={(e) => handleSubmit(e)}\r\n\t\t\t\tstyle={{ marginTop: \"2rem\" }}\r\n\t\t\t>\r\n\t\t\t\t{errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Form.Group controlId=\"title\">\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\t\tvalue={state.title || \"\"}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter title\"\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Form.Group controlId=\"description\">\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\t\t\tvalue={state.description || \"\"}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter description\"\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<div className=\"upload-section\">\r\n\t\t\t\t\t{/* <Dropzone\r\n\t\t\t\t\t\tonDrop={onDrop}\r\n\t\t\t\t\t\tonDragEnter={() => updateBorder(\"over\")}\r\n\t\t\t\t\t\tonDragLeave={() => updateBorder(\"leave\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{({ getRootProps, getInputProps }) => (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t{...getRootProps({ className: \"drop-zone\" })}\r\n\t\t\t\t\t\t\t\tref={dropRef}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<input {...getInputProps()} />\r\n\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\tDrag and drop a file OR click here to select\r\n\t\t\t\t\t\t\t\t\ta file\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t{file && (\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<strong>Selected file:</strong>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t{file.name}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Dropzone> */}\r\n\t\t\t\t\t{/* {previewSrc ? (\r\n\t\t\t\t\t\tisPreviewAvailable ? (\r\n\t\t\t\t\t\t\t<div className=\"image-preview\">\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclassName=\"preview-image\"\r\n\t\t\t\t\t\t\t\t\tsrc={previewSrc}\r\n\t\t\t\t\t\t\t\t\talt=\"Preview\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<div className=\"preview-message\">\r\n\t\t\t\t\t\t\t\t<p>No preview available for this file</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className=\"preview-message\">\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tImage preview will be shown here after selection\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)} */}\r\n\t\t\t\t</div>\r\n\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<h1>File Upload And Download</h1>\r\n\t\t\t<nav>\r\n\t\t\t\t<NavLink activeClassName=\"active\" to=\"/\" exact={true}>\r\n\t\t\t\t\tHome\r\n\t\t\t\t</NavLink>\r\n\t\t\t\t<NavLink activeClassName=\"active\" to=\"/list\">\r\n\t\t\t\t\tFiles List\r\n\t\t\t\t</NavLink>\r\n\t\t\t</nav>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport FileViewer from \"react-file-viewer\";\r\n\r\nfunction FileView({ type, url }) {\r\n\treturn <FileViewer fileType={type} filePath={url} />;\r\n}\r\n\r\nexport default FileView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { API_URL } from \"../utils/constants\";\r\nimport Modal from \"react-modal\";\r\nimport FileView from \"./FileViewer\";\r\nimport fileDownload from \"js-file-download\";\r\nimport FilePreviews from \"filepreviews\";\r\n\r\nconst FilesList = () => {\r\n\tconst [filesList, setFilesList] = useState([]);\r\n\tconst [errorMsg, setErrorMsg] = useState(\"\");\r\n\tconst [fileResponse, setFileResponse] = useState();\r\n\tconst [preview, setPreview] = useState(false);\r\n\tconst [previewUrl, setpreviewUrl] = useState();\r\n\tconst [x, setx] = useState({ id: \"\", title: \"\", url: \"\" });\r\n\tconst [search, setSearch] = useState(\"\");\r\n\r\n\tconst customStyles = {\r\n\t\tcontent: {\r\n\t\t\ttop: \"1%\",\r\n\t\t\tleft: \"3%\",\r\n\t\t\twidth: \"95%\",\r\n\t\t\theight: \"95vh\",\r\n\t\t\tbackground: \"white\",\r\n\t\t},\r\n\t};\r\n\r\n\tconsole.log(\"previewUrl\", previewUrl);\r\n\r\n\tconst getPreviewUrl = async (url) => {\r\n\t\tconsole.log(\"url\", url);\r\n\r\n\t\ttry {\r\n\t\t\tawait axios\r\n\t\t\t\t.post(`${API_URL}/previewUrl`, { url: url })\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tconsole.log(\"res\", res);\r\n\t\t\t\t\tsetpreviewUrl(res.data.preview.url);\r\n\t\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tif (error.response && error.response.status === 400) {\r\n\t\t\t\tsetErrorMsg(\"Error while generating preview url\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst [modalIsOpen, setIsOpen] = React.useState(false);\r\n\tfunction openModal() {\r\n\t\tsetIsOpen(true);\r\n\t}\r\n\r\n\tfunction afterOpenModal() {\r\n\t\t// references are now sync'd and can be accessed.\r\n\t}\r\n\r\n\tfunction closeModal() {\r\n\t\tsetFileResponse();\r\n\t\tsetIsOpen(false);\r\n\t\tsetPreview(false);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst getFilesList = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst { data } = await axios.get(`${API_URL}/getAllFiles`);\r\n\t\t\t\tconsole.log(\"data\", data);\r\n\t\t\t\tsetErrorMsg(\"\");\r\n\t\t\t\tsetFilesList(data);\r\n\t\t\t} catch (error) {\r\n\t\t\t\terror.response && setErrorMsg(error.response.data);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tgetFilesList();\r\n\t}, []);\r\n\r\n\tconst downloadFile = async (title, url) => {\r\n\t\tconsole.log(\"url\", url);\r\n\t\taxios\r\n\t\t\t.get(url, {\r\n\t\t\t\tresponseType: \"blob\",\r\n\t\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tfileDownload(url, title);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst deleteFile = async (id) => {\r\n\t\ttry {\r\n\t\t\tawait axios.get(`${API_URL}/delete/${id}`).then(() => {\r\n\t\t\t\tif (typeof window !== \"undefined\") {\r\n\t\t\t\t\twindow.location.reload(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tif (error.response && error.response.status === 400) {\r\n\t\t\t\tsetErrorMsg(\"Error while deleting file. Try again later\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst previewFile = async (id, title, url) => {\r\n\t\tsetpreviewUrl(\"\");\r\n\r\n\t\tsetx({ id: id, title: title, url: url });\r\n\t\tsetPreview(true);\r\n\t\ttry {\r\n\t\t\tconst result = await axios.get(`${API_URL}/download/${id}`, {\r\n\t\t\t\tresponseType: \"blob\",\r\n\t\t\t});\r\n\t\t\tsetFileResponse(result);\r\n\t\t} catch (error) {\r\n\t\t\tif (error.response && error.response.status === 400) {\r\n\t\t\t\tsetErrorMsg(\"Error while previewing file. Try again later\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// const previewer = (type) => {\r\n\t// \tif (type.includes(\"sheet\") || type.includes(\"excel\")) {\r\n\t// \t\tconsole.log(\"excellll\");\r\n\t// \t\treturn <FileView type={\"xlsx\"} url={fileResponse.config.url} />;\r\n\t// \t} else if (type.includes(\"doc\")) {\r\n\t// \t\tconsole.log(\"docccc\");\r\n\t// \t\treturn <FileView type={\"docx\"} url={fileResponse.config.url} />;\r\n\t// \t} else {\r\n\t// \t\tconsole.log(\"otherrrr\");\r\n\t// \t\treturn (\r\n\t// \t\t\t<object\r\n\t// \t\t\t\twidth=\"100%\"\r\n\t// \t\t\t\theight=\"100%\"\r\n\t// \t\t\t\tdata={fileResponse.config.url}\r\n\t// \t\t\t>\r\n\t// \t\t\t\t<param name=\"src\" value={fileResponse.config.url} />\r\n\t// \t\t\t\t<param name=\"readonly\" value=\"false\" />\r\n\t// \t\t\t</object>\r\n\t// \t\t);\r\n\t// \t}\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<div className=\"files-container\">\r\n\t\t\t<Modal\r\n\t\t\t\tisOpen={modalIsOpen}\r\n\t\t\t\tonAfterOpen={afterOpenModal}\r\n\t\t\t\tonRequestClose={closeModal}\r\n\t\t\t\tstyle={customStyles}\r\n\t\t\t\tcontentLabel=\"Example Modal\"\r\n\t\t\t>\r\n\t\t\t\t<a\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tfloat: \"right\",\r\n\t\t\t\t\t\tpadding: \"0.5rem 1rem\",\r\n\t\t\t\t\t\tmarginBottom: \"1rem\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t\thref={x.url}\r\n\t\t\t\t\tdownload\r\n\t\t\t\t\t//onClick={() => downloadFile(x.title, x.url)}\r\n\t\t\t\t>\r\n\t\t\t\t\tDownload\r\n\t\t\t\t</a>\r\n\r\n\t\t\t\t{/* <iframe\r\n\t\t\t\t\tsrc={previewUrl}\r\n\t\t\t\t\tscrolling=\"no\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\toverflow: \"hidden\",\r\n\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\theight: \"95%\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t></iframe> */}\r\n\r\n\t\t\t\t<img src={previewUrl} alt=\"\" />\r\n\t\t\t</Modal>\r\n\t\t\t<div style={{ marginBottom: \"1rem\" }}>\r\n\t\t\t\t<label style={{ marginRight: \"1rem\", fontWeight: \"bold\" }}>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tstyle={{ paddingLeft: \"0.5rem\" }}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\tsetSearch(e.target.value.toLocaleLowerCase())\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t{!preview ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\r\n\t\t\t\t\t<table className=\"files-table\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Title</th>\r\n\t\t\t\t\t\t\t\t<th>Description</th>\r\n\t\t\t\t\t\t\t\t<th>File Name</th>\r\n\t\t\t\t\t\t\t\t<th>Delete File</th>\r\n\t\t\t\t\t\t\t\t<th>Download File</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{filesList.length > 0 ? (\r\n\t\t\t\t\t\t\t\tfilesList.map(\r\n\t\t\t\t\t\t\t\t\t({ url, _id, title, description }) => {\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\ttitle.toLowerCase().search(search) >\r\n\t\t\t\t\t\t\t\t\t\t\t\t-1 ||\r\n\t\t\t\t\t\t\t\t\t\t\tdescription\r\n\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t.search(search) > -1\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr key={_id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"file-title\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"file-description\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref=\"#/\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpreviewFile(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetPreviewUrl(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topenModal();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{description}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"file-title\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref=\"#/\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteFile(_id)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={url}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownload\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// onClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tdownloadFile(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\ttitle,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\turl,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t\t\t\tcolSpan={5}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ fontWeight: \"300\" }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tNo files found. Please add some.\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t) : null}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FilesList;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport App from '../components/App';\r\nimport Header from '../components/Header';\r\nimport FilesList from '../components/FilesList';\r\n\r\nconst AppRouter = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Header />\r\n      <div className=\"main-content\">\r\n        <Switch>\r\n          <Route component={App} path=\"/\" exact={true} />\r\n          <Route component={FilesList} path=\"/list\" />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default AppRouter;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport AppRouter from \"./router/AppRouter\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.scss\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement(\"body\");\r\nReactDOM.render(<AppRouter />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}